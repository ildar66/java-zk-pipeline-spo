--liquibase formatted sql

--changeset apavlenko:spo-17.65-VTBSPO-411 logicalFilePath:spo-17.65-VTBSPO-411 endDelimiter:/ runOnChange:true
BEGIN
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE MDTASK ADD (interest_rate_fixed number(1) default 0)');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE MDTASK ADD (interest_rate_derivative number(1) default 0)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE TABLE INDRATE_MDTASK (ID NUMBER NOT NULL, ID_MDTASK NUMBER NOT NULL, IND_RATE CHAR(12) NOT NULL, CONSTRAINT INDRATE_MDTASK_PK PRIMARY KEY (ID) ENABLE)');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE INDRATE_MDTASK ADD CONSTRAINT INDRATE_MDTASK_FK1 FOREIGN KEY (ID_MDTASK) REFERENCES MDTASK (ID_MDTASK) ON DELETE CASCADE ENABLE');
PKG_DDL_UTILS.RECREATE_SEQUENCE_FOR_TABLE('INDRATE_MDTASK', 'ID', 'INDRATE_MDTASK_SEQ');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE INDRATE_MDTASK ADD (id_factpercent number)');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE INDRATE_MDTASK ADD (rate number(38,5))');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE INDRATE_MDTASK ADD CONSTRAINT INDRATE_MDTASK_FK2 FOREIGN KEY (id_factpercent) REFERENCES factpercent (ID) ON DELETE CASCADE ENABLE');
END;
/
COMMENT ON COLUMN MDTASK.interest_rate_fixed IS 'фиксированная процентная ставка'
/
COMMENT ON COLUMN MDTASK.interest_rate_derivative IS 'плавающая процентная ставка'
/
COMMENT ON COLUMN MDTASK.is_fixed IS 'deprecated'
/
update mdtask t1 set interest_rate_fixed=(select CASE WHEN is_fixed='y' THEN 1 ELSE 0 end from mdtask t2 where t2.ID_MDTASK=t1.ID_MDTASK)
/
update mdtask t1 set interest_rate_derivative=(select CASE WHEN is_fixed='y' THEN 0 ELSE 1 end from mdtask t2 where t2.ID_MDTASK=t1.ID_MDTASK)
/
INSERT INTO INDRATE_MDTASK (ID, ID_MDTASK, IND_RATE)
select INDRATE_MDTASK_seq.nextval,id_mdtask,ind_rate from mdtask t
where ind_rate is not null
and not exists (select 1 from INDRATE_MDTASK im where im.id_mdtask=t.id_mdtask)
/
--поля по периодом и инициация значений из "по сделки в целом"
BEGIN
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE factpercent ADD interest_rate_fixed number(1) default 0 NOT NULL');
PKG_DDL_UTILS.EXECUTE_STRING('ALTER TABLE factpercent ADD interest_rate_derivative number(1) default 0 NOT NULL');
END;
/
update factpercent f set interest_rate_fixed=(select interest_rate_fixed from mdtask t2 where t2.ID_MDTASK=f.ID_MDTASK)
/
update factpercent f set interest_rate_derivative=(select interest_rate_derivative from mdtask t2 where t2.ID_MDTASK=f.ID_MDTASK)
/
--changeset akirilchev:spo-17.65-VTBSPO-626-2 logicalFilePath:spo-17.65-VTBSPO-626-2 endDelimiter:/
CREATE OR REPLACE PROCEDURE SP_INSERT_CONTRACTOR(PAR_ID_R NUMBER, PAR_ID_MDTASK NUMBER, PAR_ID_CRMORG VARCHAR2, PAR_ID_PERSON NUMBER, PAR_ID_CONTRACTOR_TYPE NUMBER)
IS
--ver 1.01
--author akirilchev@masterdm.ru
  VAR_ID_CREDIT_DEAL_CONTRACTOR NUMBER;
BEGIN
  VAR_ID_CREDIT_DEAL_CONTRACTOR := PAR_ID_R;
  
  IF PAR_ID_MDTASK IS NOT NULL AND (PAR_ID_CRMORG IS NOT NULL OR PAR_ID_PERSON IS NOT NULL) THEN
    IF VAR_ID_CREDIT_DEAL_CONTRACTOR IS NULL THEN
      SELECT MIN(ID_R)
        INTO VAR_ID_CREDIT_DEAL_CONTRACTOR
        FROM R_ORG_MDTASK S
       WHERE ID_MDTASK = PAR_ID_MDTASK 
         AND ID_CRMORG = PAR_ID_CRMORG;
    END IF;

    IF VAR_ID_CREDIT_DEAL_CONTRACTOR IS NULL THEN
      SELECT R_ORG_MDTASK_SEQ.NEXTVAL
        INTO VAR_ID_CREDIT_DEAL_CONTRACTOR
        FROM DUAL;
    END IF;

    INSERT INTO R_ORG_MDTASK_SUPPLY(ID_R, ID_MDTASK, ID_CRMORG, ID_PERSON)
    SELECT VAR_ID_CREDIT_DEAL_CONTRACTOR ID_R, PAR_ID_MDTASK ID_MDTASK, PAR_ID_CRMORG ID_CRMORG, PAR_ID_PERSON ID_PERSON
      FROM DUAL
     WHERE NOT EXISTS(SELECT 1 
                        FROM R_ORG_MDTASK_SUPPLY 
                       WHERE ID_R = VAR_ID_CREDIT_DEAL_CONTRACTOR
                             OR
                             (
                               ID_MDTASK = PAR_ID_MDTASK 
                               AND (
                                 ID_CRMORG = PAR_ID_CRMORG 
                                 OR 
                                 ID_PERSON = PAR_ID_PERSON
                               )
                             )
                     );
    
    SELECT MIN(ID_R)
      INTO VAR_ID_CREDIT_DEAL_CONTRACTOR
      FROM R_ORG_MDTASK_SUPPLY 
     WHERE ID_MDTASK = PAR_ID_MDTASK 
       AND (
              ID_CRMORG = PAR_ID_CRMORG 
              OR 
              ID_PERSON = PAR_ID_PERSON
           );
  END IF;

  IF PAR_ID_CONTRACTOR_TYPE IS NOT NULL AND VAR_ID_CREDIT_DEAL_CONTRACTOR IS NOT NULL THEN
    INSERT INTO CONTRACTOR_TYPE_SUPPLY (ID_R, ID_CONTRACTOR_TYPE)
    SELECT VAR_ID_CREDIT_DEAL_CONTRACTOR, PAR_ID_CONTRACTOR_TYPE
      FROM DUAL
     WHERE NOT EXISTS(SELECT 1 
                        FROM CONTRACTOR_TYPE_SUPPLY S 
                       WHERE S.ID_R = VAR_ID_CREDIT_DEAL_CONTRACTOR 
                         AND S.ID_CONTRACTOR_TYPE = PAR_ID_CONTRACTOR_TYPE);
  END IF;
END;
/
CREATE OR REPLACE PROCEDURE SPO_CONTRACTOR_SYNC(PAR_ID_MDTASK IN MDTASK.ID_MDTASK%TYPE)
IS
--ver 1.01
--author akirilchev@masterdm.ru
  CURRENT_DATE DATE := SYSDATE;

  VAR_ID_CONTRACTOR_TYPE NUMBER;
BEGIN
  FOR R_ORG_MDTASK_ROW IN (SELECT * 
                             FROM R_ORG_MDTASK 
                            WHERE ID_MDTASK = PAR_ID_MDTASK) LOOP
    SP_INSERT_CONTRACTOR(R_ORG_MDTASK_ROW.ID_R, PAR_ID_MDTASK, R_ORG_MDTASK_ROW.ID_CRMORG, NULL, NULL);

    FOR REC IN (SELECT * 
                  FROM R_CONTRACTOR_TYPE_MDTASK 
                 WHERE ID_R = R_ORG_MDTASK_ROW.ID_R) LOOP
      SP_INSERT_CONTRACTOR(REC.ID_R, NULL, NULL, NULL, REC.ID_CONTRACTOR_TYPE);
    END LOOP;
  END LOOP;

  SELECT ID_CONTRACTOR_TYPE 
    INTO VAR_ID_CONTRACTOR_TYPE 
    FROM CONTRACTOR_TYPE 
   WHERE KEY = 'WARRANTY';
  
  FOR REC IN (SELECT * 
                FROM WARRANTY 
               WHERE ID_MDTASK = PAR_ID_MDTASK) LOOP
    SP_INSERT_CONTRACTOR(NULL, PAR_ID_MDTASK, REC.ORG, REC.ID_PERSON, VAR_ID_CONTRACTOR_TYPE);
  END LOOP;

  SELECT ID_CONTRACTOR_TYPE 
    INTO VAR_ID_CONTRACTOR_TYPE 
    FROM CONTRACTOR_TYPE 
   WHERE KEY = 'GARANT';
   
  FOR REC IN (SELECT * 
                FROM GARANT 
               WHERE ID_MDTASK = PAR_ID_MDTASK) LOOP
    SP_INSERT_CONTRACTOR(NULL, PAR_ID_MDTASK, REC.ORG, REC.ID_PERSON, VAR_ID_CONTRACTOR_TYPE);
  END LOOP;

  SELECT ID_CONTRACTOR_TYPE 
    INTO VAR_ID_CONTRACTOR_TYPE 
    FROM CONTRACTOR_TYPE 
   WHERE KEY = 'DEPOSIT';
   
  FOR REC IN (SELECT * 
                FROM DEPOSIT 
               WHERE ID_MDTASK = PAR_ID_MDTASK) LOOP
    SP_INSERT_CONTRACTOR(NULL, PAR_ID_MDTASK, REC.ID_CRMORG, REC.ID_PERSON, VAR_ID_CONTRACTOR_TYPE);
  END LOOP;

  UPDATE R_ORG_MDTASK_SUPPLY S
     SET DELETE_DATE = SYSDATE
   WHERE DELETE_DATE IS NULL 
     AND ID_MDTASK = PAR_ID_MDTASK 
     AND NOT EXISTS (
            SELECT 1
              FROM SPO_ALL_CONTRACTOR
             WHERE ID_MDTASK = PAR_ID_MDTASK
               AND
                 (
                     ID_CRMORG = S.ID_CRMORG
                     OR
                     ID_PERSON = S.ID_PERSON
                 )
         );
         
  UPDATE MDTASK T 
     SET T.MAIN_ORG = (SELECT F.ID_UNITED_CLIENT 
                         FROM CRM_FINANCE_ORG F INNER JOIN R_ORG_MDTASK R ON R.ID_CRMORG=F.ID_ORG 
                        WHERE R.ID_MDTASK=T.ID_MDTASK 
                          AND R.ORDER_DISP=0) 
   WHERE T.ID_MDTASK=PAR_ID_MDTASK;
END;
/
--changeset akirilchev:spo-17.65-VTBSPO-626-2-sync logicalFilePath:spo-17.65-VTBSPO-626-2-sync endDelimiter:/
BEGIN
FOR REC IN (SELECT ID_MDTASK FROM MDTASK) LOOP
 SPO_CONTRACTOR_SYNC(REC.ID_MDTASK);
END LOOP;
END;
/
COMMIT
/
--changeset apavlenko:spo-17.65-VTBSPO-774 logicalFilePath:spo-17.65-VTBSPO-774 endDelimiter:/ runOnChange:true
insert into r_contractor_type_mdtask (ID_R,ID_CONTRACTOR_TYPE)
select r.id_r,1 from R_ORG_MDTASK r where r.ORDER_DISP=0
and not exists (select * from r_contractor_type_mdtask t where t.ID_CONTRACTOR_TYPE=1 and t.id_r=r.id_r)
/
--changeset apavlenko:spo-17-indexes logicalFilePath:spo-17-indexes endDelimiter:/ runOnChange:true
BEGIN
PKG_DDL_UTILS.EXECUTE_STRING('alter table MDTASK drop constraint MDTASK_CRMID_UNIQUE cascade');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK11_I ON SPO.MDTASK(STATUSRETURNWHO)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK12_I ON SPO.MDTASK(PLACE)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK13_I ON SPO.MDTASK(CREDIT_DECISION_PROJECT)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK14_I ON SPO.MDTASK(STATUSRETURN)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK15_I ON SPO.MDTASK(ID_LIMIT_TYPE)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX SPO.MDTASK_FK16_I ON SPO.MDTASK(INITDEPARTMENT)');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTA_PATTERN_PAID_PERCENT_T__I ON MDTASK(ID_PROCENT_ORDER) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_DEPARTMENTS_FK_I ON MDTASK(ID_DEPARTMENT) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FAVORITE_USER_ID_FK_I ON MDTASK_FAVORITE(USER_ID) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK02_I ON MDTASK(ID_SECRETARY) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK03_I ON MDTASK(ID_CHAIRMAN) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK11_I ON MDTASK(ID_AUTHORIZEDBODY) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK16_I ON MDTASK(ID_AUTHORIZED_PERSON) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK17_I ON MDTASK(STANDARD_PERIOD_VERSION) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK18_I ON MDTASK(TURNOVER_PREMIUM) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK19_I ON MDTASK(RISKPREMIUM) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK20_I ON MDTASK(EARLY_PAYMENT_PROH_PER) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK21_I ON MDTASK(PREMIUMTYPE) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASK_FK22_I ON MDTASK(ACREDETIV_SOURCE) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX MDTASKVERSION_FK1_I ON MDTASKVERSION(ID_MDTASK) tablespace SPOINDX compute statistics');
PKG_DDL_UTILS.EXECUTE_STRING('CREATE INDEX R_CONTRACTOR_TYPE_MDTASK_FK2_I ON R_CONTRACTOR_TYPE_MDTASK(ID_CONTRACTOR_TYPE) tablespace SPOINDX compute statistics');
END;
/
