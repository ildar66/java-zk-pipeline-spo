// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.uit.director.db.ejb;

import com.vtb.domain.ProcessSearchParam;
import com.vtb.domain.Task;
import com.vtb.domain.WorkflowTaskInfo;
import com.vtb.exception.MappingException;
import com.vtb.exception.NoSuchOrganizationException;
import java.io.IOException;
import java.io.Serializable;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import javax.ejb.CreateException;
import javax.naming.NamingException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;
import org.uit.director.db.dbobjects.ProcessControlType;
import org.uit.director.db.dbobjects.ProcessPacketBean;
import org.uit.director.db.dbobjects.WorkflowAssignInfo;
import org.uit.director.db.dbobjects.WorkflowProcessInfo;

public class _DBFlexWorkflowCommon_Stub extends Stub implements DBFlexWorkflowCommon,
Remote {
    
    private static final String[] _type_ids = {
        "RMI:org.uit.director.db.ejb.DBFlexWorkflowCommon:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public Long createTask(Task arg0, Long arg1, Long arg2, Integer arg3, Long arg4, ArrayList arg5, ProcessControlType arg6) throws RemoteException, NoSuchOrganizationException, MappingException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createTask", true);
                        out.write_value(arg0,Task.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,Integer.class);
                        out.write_value(arg4,Long.class);
                        out.write_value((Serializable)arg5,ArrayList.class);
                        out.write_value(arg6,ProcessControlType.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Long) in.read_value(Long.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/vtb/_exception/NoSuchOrganizationEx:1.0")) {
                            throw (NoSuchOrganizationException) in.read_value(NoSuchOrganizationException.class);
                        }
                        if (id.equals("IDL:com/vtb/_exception/MappingEx:1.0")) {
                            throw (MappingException) in.read_value(MappingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createTask",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5,arg6},_orb());
                    Task arg0Copy = (Task) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    Integer arg3Copy = (Integer) copies[3];
                    Long arg4Copy = (Long) copies[4];
                    ArrayList arg5Copy = (ArrayList) copies[5];
                    ProcessControlType arg6Copy = (ProcessControlType) copies[6];
                    Long result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).createTask(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy, arg6Copy);
                    return (Long)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof NoSuchOrganizationException) {
                        throw (NoSuchOrganizationException)exCopy;
                    }
                    if (exCopy instanceof MappingException) {
                        throw (MappingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String acceptWork(long arg0, Long arg1, String arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("acceptWork", true);
                        out.write_longlong(arg0);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("acceptWork",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg1,arg2},_orb());
                    Long arg1Copy = (Long) copies[0];
                    String arg2Copy = (String) copies[1];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).acceptWork(arg0, arg1Copy, arg2Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String acceptWorks(ArrayList arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("acceptWorks", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("acceptWorks",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList arg0Copy = (ArrayList) Util.copyObject(arg0,_orb());
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).acceptWorks(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String goBackWork(long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("goBackWork", true);
                        out.write_longlong(arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("goBackWork",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).goBackWork(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String updateAttribute(long arg0, String arg1, String arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateAttribute", true);
                        out.write_longlong(arg0);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateAttribute",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).updateAttribute(arg0, arg1, arg2);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public HashMap getStaticWorkflowData() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_staticWorkflowData", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (HashMap) in.read_value(HashMap.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_staticWorkflowData",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    HashMap result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getStaticWorkflowData();
                    return (HashMap)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public WorkflowTaskInfo getTaskInfo(long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getTaskInfo", true);
                        out.write_longlong(arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (WorkflowTaskInfo) in.read_value(WorkflowTaskInfo.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getTaskInfo",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    WorkflowTaskInfo result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getTaskInfo(arg0);
                    return (WorkflowTaskInfo)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String updateAttributes(ArrayList arg0, ProcessControlType arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateAttributes", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        out.write_value(arg1,ProcessControlType.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateAttributes",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ArrayList arg0Copy = (ArrayList) copies[0];
                    ProcessControlType arg1Copy = (ProcessControlType) copies[1];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).updateAttributes(arg0Copy, arg1Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getComments(long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getComments", true);
                        out.write_longlong(arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getComments",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getComments(arg0);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList completeWorks(ArrayList arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("completeWorks", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("completeWorks",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList arg0Copy = (ArrayList) Util.copyObject(arg0,_orb());
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).completeWorks(arg0Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList execQuery(String arg0) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("execQuery", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("execQuery",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).execQuery(arg0);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int execUpdate(String arg0) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("execUpdate", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("execUpdate",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).execUpdate(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String deleteMessage(String arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteMessage", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteMessage",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteMessage(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void deleteAttributeByName(long arg0, String arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteAttributeByName", true);
                        out.write_longlong(arg0);
                        out.write_value(arg1,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteAttributeByName",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteAttributeByName(arg0, arg1);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String refuseProcess(String arg0) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("refuseProcess", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("refuseProcess",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).refuseProcess(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void initProprties(Properties arg0) throws CreateException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("initProprties", true);
                        out.write_value(arg0,Properties.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:javax/ejb/CreateEx:1.0")) {
                            throw (CreateException) in.read_value(CreateException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("initProprties",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Properties arg0Copy = (Properties) Util.copyObject(arg0,_orb());
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).initProprties(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof CreateException) {
                        throw (CreateException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Object[] loadProcessPacket(ProcessPacketBean arg0) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("loadProcessPacket", true);
                        out.write_value(arg0,ProcessPacketBean.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Object[]) in.read_value(Object[].class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("loadProcessPacket",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ProcessPacketBean arg0Copy = (ProcessPacketBean) Util.copyObject(arg0,_orb());
                    Object[] result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).loadProcessPacket(arg0Copy);
                    return (Object[])Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void addSpetialReport(String arg0, String arg1, String arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addSpetialReport", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addSpetialReport",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).addSpetialReport(arg0, arg1, arg2, arg3);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String getSignum(long arg0, boolean arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getSignum", true);
                        out.write_longlong(arg0);
                        out.write_boolean(arg1);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getSignum",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getSignum(arg0, arg1);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public HashMap getAttributes(ArrayList arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAttributes", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (HashMap) in.read_value(HashMap.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAttributes",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList arg0Copy = (ArrayList) Util.copyObject(arg0,_orb());
                    HashMap result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getAttributes(arg0Copy);
                    return (HashMap)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String deleteSchema(String arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteSchema", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteSchema",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteSchema(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String addSchedulerInfo(String arg0, ArrayList arg1, String arg2, String arg3, String arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addSchedulerInfo", true);
                        out.write_value(arg0,String.class);
                        out.write_value((Serializable)arg1,ArrayList.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,String.class);
                        out.write_value(arg4,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addSchedulerInfo",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    String arg0Copy = (String) copies[0];
                    ArrayList arg1Copy = (ArrayList) copies[1];
                    String arg2Copy = (String) copies[2];
                    String arg3Copy = (String) copies[3];
                    String arg4Copy = (String) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).addSchedulerInfo(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String loadSubProcessData(ArrayList arg0, ArrayList arg1, ArrayList arg2, Object[] arg3, Long arg4) throws SQLException, IOException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("loadSubProcessData", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        out.write_value((Serializable)arg1,ArrayList.class);
                        out.write_value((Serializable)arg2,ArrayList.class);
                        out.write_value(cast_array(arg3),Object[].class);
                        out.write_value(arg4,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        if (id.equals("IDL:java/io/IOEx:1.0")) {
                            throw (IOException) in.read_value(IOException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("loadSubProcessData",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    ArrayList arg0Copy = (ArrayList) copies[0];
                    ArrayList arg1Copy = (ArrayList) copies[1];
                    ArrayList arg2Copy = (ArrayList) copies[2];
                    Object[] arg3Copy = (Object[]) copies[3];
                    Long arg4Copy = (Long) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).loadSubProcessData(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    if (exCopy instanceof IOException) {
                        throw (IOException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public WorkflowProcessInfo getProcessInfo(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getProcessInfo", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (WorkflowProcessInfo) in.read_value(WorkflowProcessInfo.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getProcessInfo",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    WorkflowProcessInfo result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getProcessInfo(arg0Copy);
                    return (WorkflowProcessInfo)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getUsersInStage(long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getUsersInStage", true);
                        out.write_longlong(arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getUsersInStage",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getUsersInStage(arg0);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList callQuery(ArrayList arg0, String arg1, String[] arg2) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("callQuery", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        out.write_value(arg1,String.class);
                        out.write_value(cast_array(arg2),String[].class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("callQuery",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    ArrayList arg0Copy = (ArrayList) copies[0];
                    String arg1Copy = (String) copies[1];
                    String[] arg2Copy = (String[]) copies[2];
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).callQuery(arg0Copy, arg1Copy, arg2Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String backWorkToStage(long arg0, long arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("backWorkToStage", true);
                        out.write_longlong(arg0);
                        out.write_longlong(arg1);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("backWorkToStage",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).backWorkToStage(arg0, arg1);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int getVersionDB() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_versionDB", true);
                        in = _invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_versionDB",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getVersionDB();
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void setExternalResourcesData(HashMap arg0, HashMap arg1) throws SQLException, NamingException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setExternalResourcesData", true);
                        out.write_value(arg0,HashMap.class);
                        out.write_value(arg1,HashMap.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        if (id.equals("IDL:javax/naming/NamingEx:1.0")) {
                            throw (NamingException) in.read_value(NamingException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("setExternalResourcesData",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    HashMap arg0Copy = (HashMap) copies[0];
                    HashMap arg1Copy = (HashMap) copies[1];
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).setExternalResourcesData(arg0Copy, arg1Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    if (exCopy instanceof NamingException) {
                        throw (NamingException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public WorkflowAssignInfo getAssignInfo(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAssignInfo", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (WorkflowAssignInfo) in.read_value(WorkflowAssignInfo.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAssignInfo",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    WorkflowAssignInfo result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getAssignInfo(arg0Copy);
                    return (WorkflowAssignInfo)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public HashMap getUsersInfo() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_usersInfo", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (HashMap) in.read_value(HashMap.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_usersInfo",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    HashMap result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getUsersInfo();
                    return (HashMap)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void acceptWorksControl(ArrayList arg0, Long arg1, String arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("acceptWorksControl", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("acceptWorksControl",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    ArrayList arg0Copy = (ArrayList) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).acceptWorksControl(arg0Copy, arg1Copy, arg2Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String[] assignToUser(Long arg0, String arg1, ArrayList arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("assignToUser", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,String.class);
                        out.write_value((Serializable)arg2,ArrayList.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String[]) in.read_value(String[].class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("assignToUser",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Long arg0Copy = (Long) copies[0];
                    String arg1Copy = (String) copies[1];
                    ArrayList arg2Copy = (ArrayList) copies[2];
                    String[] result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).assignToUser(arg0Copy, arg1Copy, arg2Copy);
                    return (String[])Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int addWorkflowRole(Long arg0, String arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addWorkflowRole", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addWorkflowRole",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    String arg1Copy = (String) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).addWorkflowRole(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String addWorkflowUser(Long arg0, String arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addWorkflowUser", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addWorkflowUser",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    String arg1Copy = (String) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).addWorkflowUser(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String deleteAssign(Long arg0, Long arg1, String arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteAssign", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteAssign",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteAssign(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String deleteProcess(Long arg0, Long arg1, String arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteProcess", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteProcess",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteProcess(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int deleteWorkflowUser(Long arg0, Long arg1, String arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteWorkflowUser__java_lang_Long__java_lang_Long__CORBA_WStringValue", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteWorkflowUser__java_lang_Long__java_lang_Long__CORBA_WStringValue",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteWorkflowUser(arg0Copy, arg1Copy, arg2Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int deleteWorkflowRole(Long arg0, String arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteWorkflowRole", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteWorkflowRole",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    String arg1Copy = (String) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteWorkflowRole(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String redirectWork(String arg0, String arg1, Long arg2, Long arg3, String arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("redirectWork", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,Long.class);
                        out.write_value(arg4,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("redirectWork",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    String arg0Copy = (String) copies[0];
                    String arg1Copy = (String) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    Long arg3Copy = (Long) copies[3];
                    String arg4Copy = (String) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).redirectWork(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String updateAttributesControl(ArrayList arg0, Long arg1, String arg2, String arg3, ProcessControlType arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateAttributesControl", true);
                        out.write_value((Serializable)arg0,ArrayList.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,String.class);
                        out.write_value(arg4,ProcessControlType.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateAttributesControl",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    ArrayList arg0Copy = (ArrayList) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    String arg3Copy = (String) copies[3];
                    ProcessControlType arg4Copy = (ProcessControlType) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).updateAttributesControl(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String redirectWorks(Long arg0, Long arg1, String arg2, Long arg3, String arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("redirectWorks", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,Long.class);
                        out.write_value(arg4,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("redirectWorks",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    String arg2Copy = (String) copies[2];
                    Long arg3Copy = (Long) copies[3];
                    String arg4Copy = (String) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).redirectWorks(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getAssignToUsersTasksList(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAssignToUsersTasksList", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAssignToUsersTasksList",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getAssignToUsersTasksList(arg0Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getWorkList(Long arg0, Integer arg1, ProcessSearchParam arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getWorkList", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Integer.class);
                        out.write_value(arg2,ProcessSearchParam.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getWorkList",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Integer arg1Copy = (Integer) copies[1];
                    ProcessSearchParam arg2Copy = (ProcessSearchParam) copies[2];
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getWorkList(arg0Copy, arg1Copy, arg2Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void setComment(long arg0, long arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setComment", true);
                        out.write_longlong(arg0);
                        out.write_longlong(arg1);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("setComment",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg2,arg3},_orb());
                    Long arg2Copy = (Long) copies[0];
                    String arg3Copy = (String) copies[1];
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).setComment(arg0, arg1, arg2Copy, arg3Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void setMessage(int arg0, int arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setMessage", true);
                        out.write_long(arg0);
                        out.write_long(arg1);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("setMessage",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg2,arg3},_orb());
                    Long arg2Copy = (Long) copies[0];
                    String arg3Copy = (String) copies[1];
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).setMessage(arg0, arg1, arg2Copy, arg3Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getMessages(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getMessages", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getMessages",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getMessages(arg0Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getNotifyData(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getNotifyData", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getNotifyData",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getNotifyData(arg0Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void refuseWork(long arg0, Long arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("refuseWork", true);
                        out.write_longlong(arg0);
                        out.write_value(arg1,Long.class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("refuseWork",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg1Copy = (Long) Util.copyObject(arg1,_orb());
                    ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).refuseWork(arg0, arg1Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Long createProcess(Integer arg0, Long arg1, Long arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createProcess", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Long) in.read_value(Long.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createProcess",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    Long result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).createProcess(arg0Copy, arg1Copy, arg2Copy);
                    return (Long)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Long createProcessAndSetAttributes(Integer arg0, Long arg1, Long arg2, ArrayList arg3, ProcessControlType arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createProcessAndSetAttributes", true);
                        out.write_value(arg0,Integer.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,Long.class);
                        out.write_value((Serializable)arg3,ArrayList.class);
                        out.write_value(arg4,ProcessControlType.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Long) in.read_value(Long.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createProcessAndSetAttributes",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    Integer arg0Copy = (Integer) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    ArrayList arg3Copy = (ArrayList) copies[3];
                    ProcessControlType arg4Copy = (ProcessControlType) copies[4];
                    Long result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).createProcessAndSetAttributes(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                    return (Long)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int addUserNotify(Long arg0, String arg1, String arg2, Long arg3, String arg4) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("addUserNotify", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,String.class);
                        out.write_value(arg2,String.class);
                        out.write_value(arg3,Long.class);
                        out.write_value(arg4,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("addUserNotify",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                    Long arg0Copy = (Long) copies[0];
                    String arg1Copy = (String) copies[1];
                    String arg2Copy = (String) copies[2];
                    Long arg3Copy = (Long) copies[3];
                    String arg4Copy = (String) copies[4];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).addUserNotify(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public int deleteWorkflowUser(Long arg0, ArrayList arg1, Long arg2, String arg3) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("deleteWorkflowUser__java_lang_Long__java_util_ArrayList__java_lang_Long__CORBA_WStringValue", true);
                        out.write_value(arg0,Long.class);
                        out.write_value((Serializable)arg1,ArrayList.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_long();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("deleteWorkflowUser__java_lang_Long__java_util_ArrayList__java_lang_Long__CORBA_WStringValue",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    Long arg0Copy = (Long) copies[0];
                    ArrayList arg1Copy = (ArrayList) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    String arg3Copy = (String) copies[3];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).deleteWorkflowUser(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String reassignUser(Long arg0, Integer arg1, Long arg2, Long arg3, String arg4, String arg5) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("reassignUser", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Integer.class);
                        out.write_value(arg2,Long.class);
                        out.write_value(arg3,Long.class);
                        out.write_value(arg4,String.class);
                        out.write_value(arg5,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("reassignUser",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Integer arg1Copy = (Integer) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    Long arg3Copy = (Long) copies[3];
                    String arg4Copy = (String) copies[4];
                    String arg5Copy = (String) copies[5];
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).reassignUser(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Map getAttributesByProcess(long arg0) throws SQLException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getAttributesByProcess", true);
                        out.write_longlong(arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Map) in.read_value(Map.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/sql/SQLEx:1.0")) {
                            throw (SQLException) in.read_value(SQLException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAttributesByProcess",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Map result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getAttributesByProcess(arg0);
                    return (Map)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof SQLException) {
                        throw (SQLException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public ArrayList getSubordinateUsersInDepartment(Long arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getSubordinateUsersInDepartment", true);
                        out.write_value(arg0,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ArrayList) in.read_value(ArrayList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getSubordinateUsersInDepartment",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Long arg0Copy = (Long) Util.copyObject(arg0,_orb());
                    ArrayList result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getSubordinateUsersInDepartment(arg0Copy);
                    return (ArrayList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public String findCRMClaimName(String arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findCRMClaimName", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findCRMClaimName",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).findCRMClaimName(arg0);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public LinkedHashMap findDepartmentsForTransition(Long arg0, Long arg1, Long arg2) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("findDepartmentsForTransition", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        out.write_value(arg2,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (LinkedHashMap) in.read_value(LinkedHashMap.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("findDepartmentsForTransition",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    Long arg2Copy = (Long) copies[2];
                    LinkedHashMap result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).findDepartmentsForTransition(arg0Copy, arg1Copy, arg2Copy);
                    return (LinkedHashMap)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public LinkedHashMap getVisitedDepartments(Long arg0, Long arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getVisitedDepartments", true);
                        out.write_value(arg0,Long.class);
                        out.write_value(arg1,Long.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (LinkedHashMap) in.read_value(LinkedHashMap.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getVisitedDepartments",org.uit.director.db.ejb.DBFlexWorkflowCommon.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    Long arg0Copy = (Long) copies[0];
                    Long arg1Copy = (Long) copies[1];
                    LinkedHashMap result = ((org.uit.director.db.ejb.DBFlexWorkflowCommon)so.servant).getVisitedDepartments(arg0Copy, arg1Copy);
                    return (LinkedHashMap)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.
    
    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
