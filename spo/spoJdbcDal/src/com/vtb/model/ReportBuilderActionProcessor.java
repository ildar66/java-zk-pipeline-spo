package com.vtb.model;

import java.util.List;
import java.util.Map;

import com.vtb.domain.ReportTemplate;
import com.vtb.exception.MappingException;
import com.vtb.exception.NoSuchObjectException;
import com.vtb.report.renderer.ReportRenderer;

/**
 * Common interface for report builder utility
 * @author Michael Kuznetsov
 */
public interface ReportBuilderActionProcessor {

	/**
	 * Names of fixed reports generated by system (not by users).
	 * We need their names to process requests.
	 * Should have the same names in the table REPORT_TEMPLATE   
	 */
	public enum ReportTemplateReportName {
		NEW_TASKS_REPORT ("new_tasks"),
		TASK_IN_WORK_REPORT ("task_in_work"),
		APPOINTED_TASK_REPORT ("appointed_tasks"),
		OPERATION_JOURNAL_REPORT ("order_stages"),
		ACTIVE_OPERATION_REPORT ("active_stages"),
		VARIABLES_TO_STAGE_REPORT ("variablesByOperation"),
		ROLES_TO_STAGE_REPORT ("rolesByOperation"),
		ROLES_OF_USERS_REPORT ("user_by_role"),
		ROLE_TREE_REPORT ("role_tree"),
		ATTRIBUTE_TREE_REPORT ("attribute_tree"),
		CRM_CLAIMS_REPORT ("orderReport"),
		DURATION_STAGES_REPORT ("duration_stages"),
		AUDIT_DUR_STAGES_REPORT ("audit_dur_stages"),
		DURATION_EXPERTISE_REPORT ("duration_expertise"),
		NEW_DOCUMENTS_BY_CLAIMS_REPORT ("new_documents_for_go_by_oders"),
		NEW_DOCUMENTS_BY_ORGANIZATIONS_REPORT ("new_documents_for_go_for_organizations"),
		LIMIT_DECISION("limit_decision"),
		
		LIMIT_DECISION_MSWORD("limit_decision_word"),
		
		SIGNATURE_REPORT("signature_report");
		
		
		private String value;
		
		/**
		 * Constructor
		 * @param value value of report type
		 */
		ReportTemplateReportName(String value) {
			this.value = value;
		}
		
		/**
		 * Returns value of report type
		 * @return value of report type
		 */
		public String getValue() { return value; }
		
		/**
		 * Checks the equality 
		 * @param type value of report type 
		 * @return <code>true</code> - if are equal
		 */
		public boolean equals(String value) { return (this.value.equals(value)); }
	};

	
	/**
     * Names of report parameters (passed from *.jsp pages and processed in report builders).
     */
    public enum ReportTemplateParams {
        ID_PROCESS ("idProcess"),
        REPORT_NAME("__reportType"),
        ID_TYPE_PROCESS("p_idTypeProcess"),
        ID_CLAIM("p_idClaim"),
        MDTASK_NUMBER("mdtask_number"),
        ID_DEPARTMENT("p_idDepartment"),
        CORRRESPONDING_DEPS("correspondingDeps"),
        ID_USER("userId"),
        MDTASK_ID("mdtaskId"),
        USER_ID("userId"),  // TODO : refactor!!!
        PROCESS_ID("processId"), // TODO : refactor!!!        
        DEPARTMENT_ID("departmentId"), // TODO : refactor!!!
        REPORT_FILTER_DEPARMENTS_STRing("fltrDepsss"),
        IS_DELINQUENCY("isDelinquency"),
        ROLE_ID("roleId"), 
        STAGE_ID("stageId"),
        LEFT_DATE("leftDate"),
        RIGHT_DATE("rightDate"),
        ACCEPT_LEFT_DATE("acceptLeftDate"),
        ACCEPT_RIGHT_DATE("acceptRightDate"),
        OPERSTION_STATUS("operation_status"),
        SHOW_UNACTIVE("showUnactive"),
        REPORT_MARK("__report"),
        REPORT_FORMAT("__format"),
        SOURCE("xml"),
        
        DOC_TYPE_RTF_DOC_DOCX("doc_type_rtf_doc_docx"),
        SIGNATURE_FIO("signature_fio"),
        SIGNATURE_DATE("signature_date"),
        REPORTING_ENGINE("__reportingEngine");
        
        private String value;
        
        /**
         * Constructor
         * @param value value of report type
         */
        ReportTemplateParams(String value) {
            this.value = value;
        }
        
        /**
         * Returns value of report type
         * @return value of report type
         */
        public String getValue() { return value; }
        
        /**
         * Checks the equality 
         * @param type value of report type 
         * @return <code>true</code> - if are equal
         */
        public boolean equals(String value) { return (this.value.equals(value)); }
    };

	/**
	 * Builds a report with a given reportType and parameters
	 * @param reportType name of report
	 * @param parameters parameters of report
	 * @return report renderer [HTML, XML DOc etc. -- depends on the implementation]
	 * @throws Exception
	 */
	ReportRenderer getReport (String reportType, Map<String, String[]> parameters) throws Exception;
	
	/**
     * Helps to build one of the Print Form report (type PRINT_FORM in the REPORT_TEMPLATE table).
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTaskId mdTask Id as String 
     * @param dynamicEncoding whether to use dynamicEncoding for report generation
     * @return report renderer.
	 * @throws Exception 
     */
    ReportRenderer getPrintFormReport (String reportName, String mdTaskId, boolean dynamicEncoding) throws Exception;
 

	/**
     * TODO :implement!!!
     * Helps to build report in the Excel format.
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTaskId mdTask Id as String 
     * @param dynamicEncoding whether to use dynamicEncoding for report generation
     * @return report renderer.
	 * @throws Exception 
     */
    ReportRenderer  getPrintFormExcelReport (String reportName, String mdTaskId, boolean dynamicEncoding) throws Exception;

    /**
     * Helps to build one of the Print Form Word report (type PRINT_FORM_WORD in the REPORT_TEMPLATE table).
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTask Id as String
     * @return report renderer.
     * @throws Exception
     */    
    ReportRenderer getPrintFormWordReport (String reportName, String mdTaskId) throws Exception;

	/**
	 * Retrieve a reportTemplate by filename. Only one value should be!
	 * @param filename
	 * @return ReportTemplate value objects, if found. Null otherwise. Exception in case of error (two records or more ) 
	 * @throws MappingException
	 */
	ReportTemplate findByFilename(String filename) throws MappingException;
	
	/**
	 * Retrieve a list of reportTemplate by type.
	 * @param type
	 * @return list of ReportTemplate 
	 * @throws MappingException
	 */
	List<ReportTemplate> findByType(String type) throws NoSuchObjectException, MappingException;

    /**
     * Gets a LIMIT_DECISION report as MSWord file (it's used very actively; let users use it in the simple way).
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTaskId mdTask Id as String
     * @param templateId report template identifier as String  
     * @param dynamicEncoding whether to use dynamicEncoding for report generation
     * @return report renderer.
     * @throws Exception 
     */
    ReportRenderer getLimitDecisionReportAsWord(String mdTaskId, String templateId, boolean dynamicEncoding) throws Exception;
    
    /**
     * Gets a LIMIT_DECISION report (it's used very actively; let users use it in the simple way).
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTaskId mdTask Id as String 
     * @param dynamicEncoding whether to use dynamicEncoding for report generation
     * @return report renderer.
     * @throws Exception 
     */
    @Deprecated
    ReportRenderer getLimitDecisionReport (String mdTaskId, boolean dynamicEncoding) throws Exception;

    /**
     * Gets a LIMIT_DECISION report as MSWord file (it's used very actively; let users use it in the simple way).
     * @param reportName name of the report template in the table REPORT_TEMPLATE (column FILENAME)
     * @param mdTaskId mdTask Id as String
     * @param templateId report template identifier as String  
     * @param dynamicEncoding whether to use dynamicEncoding for report generation
     * @param extraParameters extra parameters passed to the report (they don't use Task information)
     * @param sourceDoc document to which the generated document will be added.
     * @return report renderer
     * @throws Exception  exception to throw
     */
    ReportRenderer getTaskBasedJoinDocumentReport(String mdTaskId, String templateId, boolean dynamicEncoding, 
                                                  Map<String, String> extraParameters, byte[] sourceDoc) throws Exception;

}
